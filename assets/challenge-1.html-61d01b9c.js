import{_ as t,p,q as o,s,R as n,t as e,Y as c,n as l}from"./framework-aa5c4115.js";const i={},r=s("h2",{id:"实现-myreturntype",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#实现-myreturntype","aria-hidden":"true"},"#"),n(" 实现 MyReturnType")],-1),k={href:"https://www.typescriptlang.org/docs/handbook/2/typeof-types.html",target:"_blank",rel:"noopener noreferrer"},d=s("code",null,"typeof",-1),u={href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types",target:"_blank",rel:"noopener noreferrer"},y=c(`<p>题目要求如下：</p><p>Implement the built-in <code>ReturnType&lt;T&gt;</code> generic without using it.</p><p>For example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">a</span> <span class="token operator">=</span> MyReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> fn<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// should be &quot;1 | 2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>分析题目意图 - 实现一个类型 <code>MyReturnType&lt;T&gt;</code> 来表示函数执行后的返回类型</p></li><li><p>需要哪些知识？</p><ol><li><p>泛型 ✅</p></li><li><p><code>typeof</code> 可以用来表示一个值的类型是什么，包括引用值以及他的属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token string">&#39;ss&#39;</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token punctuation">{</span> xx<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;ss&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">a</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span> <span class="token comment">// { name: number, age: string, sex: number[], b: { xx: number }}</span>
<span class="token keyword">type</span> <span class="token class-name">b</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> arr<span class="token punctuation">;</span> <span class="token comment">// number[]</span>
<span class="token keyword">type</span> <span class="token class-name">c</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> str<span class="token punctuation">;</span> <span class="token comment">// string</span>
<span class="token keyword">type</span> <span class="token class-name">d</span><span class="token operator">=</span> <span class="token keyword">typeof</span> a<span class="token punctuation">;</span> <span class="token comment">// ❌ &#39;a&#39; only refers to a type, but is being used as a value here.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>extends</code> 条件约束，类似于 js 当中的三元运算符的问号</p></li><li><p><code>infer</code> 类型推断，可以用在 <code>extends</code> 条件类型内进行推断</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 比如，这道题需要返回 fn 的返回值那么我们就可以使用 extends 来判断泛型 T 是否是函数，然后再推断返回值</span>
<span class="token keyword">type</span> <span class="token class-name">GetReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token comment">// 等号前面的 extends 用于类型约束</span>
<span class="token comment">// 等号后面的 extends 类似条件判断，然后再利用 infer 推断返回值 R，如果 R 存在就返回 R 的类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>该如何解题？ - 懂了以上的知识就很简单了。</p></li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="实现-myomit" tabindex="-1"><a class="header-anchor" href="#实现-myomit" aria-hidden="true">#</a> 实现 MyOmit</h2><p>题目要求如下：</p><p>Implement the built-in <code>Omit&lt;T, K&gt;</code> generic without using it.</p><p>Constructs a type by picking all properties from <code>T</code> and then removing <code>K</code></p><p>For example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>
  
<span class="token keyword">type</span> <span class="token class-name">TodoPreview</span> <span class="token operator">=</span> MyOmit<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;description&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;title&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// { completed: boolean }</span>
<span class="token keyword">const</span> todo<span class="token operator">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span> completed<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>分析题目意图，实现类似 <code>Omit&lt;T, K&gt;</code> 的功能，换句话说就是排除泛型 <code>T</code> 中的属性，这个属性由 <code>K</code> 来定义。</li><li>需要哪些知识？ <ol><li>泛型 ✅</li><li>泛型 <code>T</code> 如何排除掉联合类型？ <ol><li>联合类型是泛型 <code>T</code> 的 <code>key</code></li><li><code>keyof T</code> =&gt; <code>&#39;title&#39; | &#39;description&#39; | &#39;completed&#39;</code>、<code>K</code> =&gt; <code>&#39;description&#39; | &#39;title&#39;</code></li><li><code>keyof T extends K ? never : T</code> 如果 <code>K</code> 在 <code>T</code> 的 <code>key</code> 中，就排除他</li></ol></li></ol></li><li>如何解题？ - 懂了以上知识就简单了</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyExclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">MyOmit<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> MyExclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现-mypick" tabindex="-1"><a class="header-anchor" href="#实现-mypick" aria-hidden="true">#</a> 实现 MyPick</h2><p>Implement the built-in Pick&lt;T, K&gt; generic without using it.</p><p>Constructs a type by picking the set of properties K from T</p><p>For example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TodoPreview</span> <span class="token operator">=</span> MyPick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;completed&#39;</span><span class="token operator">&gt;</span>

<span class="token keyword">const</span> todo<span class="token operator">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&#39;Clean room&#39;</span><span class="token punctuation">,</span>
  completed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>分析题目意图，实现类似 <code>MyPick&lt;T, K&gt;</code> 的功能，换句话说就是选择泛型 <code>T</code> 中的属性，这个属性由 <code>K</code> 来定义。</li><li>需要哪些知识？ <ol><li>泛型 ✅</li><li>泛型 <code>T</code> 属于 <code>K</code> 的属性选择出来，与上面 <code>MyOmit</code> 相反</li></ol></li><li>如何解题？</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyInclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">MyPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> MyInclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现-getreadonlykeys" tabindex="-1"><a class="header-anchor" href="#实现-getreadonlykeys" aria-hidden="true">#</a> 实现 GetReadonlyKeys</h2><p>Implement a generic <code>GetReadonlyKeys&lt;T&gt;</code> that returns a union of the readonly keys of an Object.</p><p>For example</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> title<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">readonly</span> description<span class="token operator">:</span> <span class="token builtin">string</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> GetReadonlyKeys<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token comment">// expected to be &quot;title&quot; | &quot;description&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>分析题目意图：获取到泛型 <code>T</code> 中是 <code>readonly</code> 的属性，返回联合类型。</li><li>需要哪些知识？ <ol><li>泛型 ✅</li><li>获取类型对象的只读属性 <ol><li><code>T[K]</code> 这样是获取到属性值</li><li><code>keyof T</code> 是获取属性，再进行 <code>readonly</code> 的筛选判断 <ol><li><code>type MyReadonlyKey&lt;T extends keyof any&gt; = T extends readonly T ? T : never;</code> ❌ 无法通过这种方式拿到具有 <code>readonly</code> 的属性</li></ol></li><li>核心还是怎样筛选出来只读类型，👆上面的方法不行，只能通过一个辅助类型函数 <code>Equal&lt;T, U&gt;</code> 来判断两个类型对象是否相等来筛选只读属性了 <ol><li><code>type Equal&lt;X, Y&gt; = (&lt;T&gt;() =&gt; T extends X ? 1 : 2) extends (&lt;T&gt;() =&gt; T extends Y ? 1 : 2) ? true : false</code></li><li>知道了如何判断只读属性，还得知道一个知识：<code>type foo&lt;T&gt; = { [K in keyof T as NewType]: T[K] }</code> 这里的 <code>as</code> 代表类型映射，意思是 <code>K</code> 最终被影射为 <code>NewType</code></li></ol></li></ol></li></ol></li><li>有了这些知识就可开搞了！</li></ol><p><code>&lt;T&gt;() =&gt; T extends X ? 1 : 2</code> 这个是个什么东西？</p><p>其实这是一个泛型函数，仔细看定义一个泛型 <code>T</code> 给一个没有入参的函数，然后用泛型 <code>T</code> 来判断返回值，这样可以延迟判断。</p><p><code>[K in keyof T as Equal&lt;Readonly&lt;{ [P in K ]: T[K]}&gt;, { [P in K]: T[K]}&gt; extends true ? K : never]</code> 这又是什么？</p><p>这个的意思就是逐个判断 <code>K</code> 属性是否是只读的，如果是 <code>[K in keyof T as Equal&lt;Readonly&lt;T&gt;, T&gt; extends true ? K : never]</code> 相当于直接判断整个类型对象，那肯定不对。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// TS 中的严格比较</span>
<span class="token keyword">type</span> <span class="token class-name">Equal<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token punctuation">{</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
  <span class="token keyword">extends</span>
  <span class="token punctuation">{</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
  <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">GetReadonlyKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> Equal<span class="token operator">&lt;</span>Readonly<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span> <span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现-myreadonly" tabindex="-1"><a class="header-anchor" href="#实现-myreadonly" aria-hidden="true">#</a> 实现 MyReadOnly</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将所有属性都设置 readonly </span>
<span class="token keyword">type</span> <span class="token class-name">MyReadOnly1<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 选择性的设置 readonly</span>
<span class="token keyword">type</span> <span class="token class-name">MyReadOnly2<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  <span class="token operator">+</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">MyReadOnly2Other<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> key <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">K</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33);function m(v,b){const a=l("ExternalLinkIcon");return p(),o("div",null,[r,s("blockquote",null,[s("p",null,[n("参考文档："),s("a",k,[d,n(" 类型运算符"),e(a)]),n(" 参考文档："),s("a",u,[n("条件类型"),e(a)])])]),y])}const T=t(i,[["render",m],["__file","challenge-1.html.vue"]]);export{T as default};
