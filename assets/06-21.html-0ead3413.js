import{_ as n,p as s,q as a,Y as e}from"./framework-aa5c4115.js";const t={},p=e(`<h2 id="vue-中的-computed-属性" tabindex="-1"><a class="header-anchor" href="#vue-中的-computed-属性" aria-hidden="true">#</a> Vue 中的 <code>computed</code> 属性</h2><p>用法：</p><p><code>computed</code> 属性支持 <code>getter</code> 和 <code>setter</code> 两个函数，如果直接写成函数形式则默认为 <code>getter</code> 函数，并且对于计算属性 Vue 会缓存其结果，也就意味着多次访问该属性返回的都是同样的结果。当然，计算属性也支持依赖响应式数据作为返回值，当响应式数据改变时会改变其结果。</p><p>场景：</p><p>计算属性一般用于复杂的响应式数据的处理，当响应式数据没改变的情况下可以极大地提高性能；但是，同样要注意，因为它会缓存结果，在计算属性中返回一个普通值那么该值永远不会被更新。</p><p>与 <code>watch</code> 相比：</p><p>它们的设计目的就不相同，<code>computed</code> 被设计作为计算响应式数据的复杂逻辑，且它是无副作用的纯函数；而 <code>watch</code> 被设计作为侦听响应式数据的变化并处理副作用逻辑。</p><p>原理：</p><ul><li><strong>初始化</strong>：当一个计算属性被定义时，Vue会为其创建一个内部的观察者实例（Watcher）。</li><li><strong>依赖收集</strong>：在计算属性的函数第一次执行时，它会访问响应式数据，这时响应式数据会将该计算属性的观察者添加到它的依赖列表中。这个过程称为依赖收集。</li><li><strong>缓存</strong>：计算属性的结果会被缓存，只有当它的依赖发生变化时，缓存才会失效。下次访问计算属性时，如果缓存有效，则直接返回缓存结果；如果缓存失效，则重新计算。</li><li><strong>派生状态</strong>：当计算属性的依赖响应式数据发生变化时，依赖于该计算属性的 Watcher 会被通知，从而触发视图更新。</li></ul><h2 id="vue-中虚拟节点-dom-有哪些类型" tabindex="-1"><a class="header-anchor" href="#vue-中虚拟节点-dom-有哪些类型" aria-hidden="true">#</a> Vue 中虚拟节点/DOM 有哪些类型？</h2><p>以下是在 XX 组件库中发现的逻辑，所以深入探索下。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> <span class="token function-variable function">getNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">children</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> children <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=&gt;</span> node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xxComp&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// ... 省略属性等等</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 <code>xxComp</code> 子组件不支持纯文本的情况，因为纯文本节点的虚拟 DOM 没有 tag 属性。</p><p>Vue 源码中对于纯文本节点的创建：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// VNode 部分</span>
<span class="token keyword">class</span> <span class="token class-name">VNode</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    tag<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    data<span class="token operator">?</span><span class="token operator">:</span> VNodeData<span class="token punctuation">,</span>
    children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    text<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    elm<span class="token operator">?</span><span class="token operator">:</span> Node<span class="token punctuation">,</span>
    context<span class="token operator">?</span><span class="token operator">:</span> Component<span class="token punctuation">,</span>
    componentOptions<span class="token operator">?</span><span class="token operator">:</span> VNodeComponentOptions<span class="token punctuation">,</span>
    asyncFactory<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Function</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createTextVNode</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面源码片段就可以看出来纯文本不存在 tag 属性～</p><p>另外，从源码中看虚拟节点包括 <code>element</code>、<code>component</code></p>`,17),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","06-21.html.vue"]]);export{u as default};
