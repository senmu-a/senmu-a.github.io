import{_ as n,p as s,q as t,s as e,R as o,t as c,Y as d,n as i}from"./framework-aa5c4115.js";const p={},r=e("h2",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),o(" 前言")],-1),l=e("p",null,"探究 Hook 的原理我们需要从它的使用入手，即：Hook 的规则、不同 Hook 的不同能力如何实现。",-1),u=e("h2",{id:"hook-的规则",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hook-的规则","aria-hidden":"true"},"#"),o(" Hook 的规则")],-1),k={href:"https://react.dev/warnings/invalid-hook-call-warning",target:"_blank",rel:"noopener noreferrer"},h=d(`<ol><li>不要在条件判断和循环中调用 Hook</li><li>不要在有条件判断的 <code>return</code> 语句后调用 Hook</li><li>不要在事件处理函数中调用 Hook</li><li>不要在 class 组件中调用 Hook</li><li>不要在 <code>useMemo</code>、<code>useReducer</code>、<code>useEffect</code> 内部函数中调用 Hook</li></ol><p>那么它的规则判断是怎么实现的呢？下面一起来探究下：</p><p>我使用的的版本是 v18.2.0，通过对上面规则进行实测，发现有三种情况：</p><blockquote><p>前提需要忽视掉 eslint 的警告</p></blockquote><ul><li>可以正常运行不报错 <ul><li>1、2、3</li></ul></li><li>控制台会打印错误，但是可以正常运行 <ul><li>5 中的 <code>useMemo</code></li></ul></li><li>会抛出错误，不可以正常运行 <ul><li>4 与 5 中的 <code>useEffect</code>、<code>useReducer</code></li></ul></li></ul><p>1、2、3 不用过多讨论了，这是因为除了语法块包裹与正常调用 Hook 没有区别。</p><p><code>useMemo</code> 中调用 Hook 控制台会报错是因为在初始化 <code>useMemo</code> 时调用了 <code>InvalidNestedHooksDispatcherOnMountInDEV</code> 方法，而该方法会添加控制台的报错情况。</p><p>最后也是我们本次分析的重点。由于他们的抛出的错误不同，我们分别来看。</p><h3 id="useeffect-函数内执行-hook" tabindex="-1"><a class="header-anchor" href="#useeffect-函数内执行-hook" aria-hidden="true">#</a> <code>useEffect</code> 函数内执行 Hook</h3><blockquote><p>表现为 <code>throwInvalidHookError</code> 方法中的报错，页面无法正常展示。</p></blockquote><p>要想搞懂该问题那就得对 Hook 注册有所了解，也就是 <code>ReactCurrentDispatcher.current</code> 的值（因为暴露给用户的 Hook 会通过该变量来获得内部定义的 Hook）。</p><ul><li>初始化注册 <code>ContextOnlyDispatcher</code>，暂时先理解为含有 <code>throwInvalidHookError</code> 报错的 Hook 方法，如果在此时就调用 Hook 就会报错 <ul><li>在 render 阶段开始之前</li></ul></li><li>render 时将 <code>ReactCurrentDispatcher.current</code> 赋值为 <code>HooksDispatcherOnMountInDEV</code> | <code>HooksDispatcherOnMountWithHookTypesInDEV</code> | <code>HooksDispatcherOnUpdateInDEV</code>，这几个都是我们平时 Hook 对应的处理逻辑，具体功能暂时不展开，只要知道如果此时调用 Hook 就不会报 <code>throwInvalidHookError</code> 方法中的错误</li><li>调用完 Hook 方法后会调用 <code>finishRenderingHooks</code> 方法，将 <code>ReactCurrentDispatcher.current</code> 赋值为 <code>ContextOnlyDispatcher</code>，所以在执行 <code>useEffect</code> 内部的函数时就有 <code>throwInvalidHookError</code> 报错了～</li></ul><h3 id="usereducer-函数内执行-hook" tabindex="-1"><a class="header-anchor" href="#usereducer-函数内执行-hook" aria-hidden="true">#</a> <code>useReducer</code> 函数内执行 Hook</h3><p>可以发现在不执行 <code>dispatch</code> 方法时是不会报错的，这是因为在调用 Hook 方法后会将 <code>ReactCurrentDispatcher.current</code> 的值设置为 <code>InvalidNestedHooksDispatcherOnMountInDEV</code> 方法，而该方法会添加控制台的报错情况。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>从上面这些 Hook 的规则报错情况来看，有的报错由 Eslint 发出的，是在编译层面发出的。而另一部分运行时的报错是跟 Hook 的执行时机有关的，比如：在调用了 <code>useEffect</code> 后将 <code>ReactCurrentDispatcher.current</code> 的值变为有报错的 Hook 函数，此时调用 <code>useState</code> 等 Hook 就会执行该报错。</p><h2 id="hook-核心内容" tabindex="-1"><a class="header-anchor" href="#hook-核心内容" aria-hidden="true">#</a> Hook 核心内容</h2><h3 id="usestate-基本原理" tabindex="-1"><a class="header-anchor" href="#usestate-基本原理" aria-hidden="true">#</a> <code>useState</code> 基本原理</h3><p>要想探寻 <code>useState</code> 的原理，我们需要知道数据如何存放、更新后的重新渲染如何进行？</p><h4 id="数据存放" tabindex="-1"><a class="header-anchor" href="#数据存放" aria-hidden="true">#</a> 数据存放</h4><p>我们都知道 React 中存在 <code>mount</code> 和 <code>update</code> 阶段，我们分别来看下，在 <code>mount</code> 时：</p><ul><li>初始化数据对象<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token punctuation">{</span>
  memoizedState<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  baseState<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  baseQueue<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  queue<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  next<span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>如果传入的初始值（<code>initialState</code>）为函数则立刻执行，并将结果保存</li><li>将 <code>initialState</code> 值赋值给 <code>hook.memoizedState</code>、<code>hook.baseState</code></li><li>初始化队列<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// basicStateReducer</span>
<span class="token keyword">function</span> <span class="token function">basicStateReducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">action</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">:</span> action<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">{</span>
  pending<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  lanes<span class="token operator">:</span> NoLanes<span class="token punctuation">,</span> <span class="token comment">// 0</span>
  dispatch<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  lastRenderedReducer<span class="token operator">:</span> basicStateReducer<span class="token punctuation">,</span>
  lastRenderedState<span class="token operator">:</span> initialState <span class="token comment">// 用户传进来的初始值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>将 <code>queue</code> 赋值给 <code>hook.queue</code></li><li>绑定 <code>dispatchSetState</code> 函数给 <code>queue.dispatch</code></li><li>返回 <code>[hook.memoizedState, queue.dispatch]</code></li></ul><p>由上述过程可以看出来，数据其实是存放在 <code>hook.memoizedState</code> 上的，那此时便会有疑问，如果我直接更改该值可不可以重新渲染？</p><p>答案是否定的，因为重新渲染本质是更新了状态值然后利用调度函数进行更新才会重新渲染页面。但如果 React 暴露调度方法供我们调用，那我们便可以自行维护状态管理了～</p><p>另外值得注意的是，我更改上面 <code>hook.memoizedState</code> 的初始化赋值会对页面渲染的值有影响，这是因为 <code>hook.memoizedState</code> 与 <code>fiber.memoizedState</code> 会相关联。</p><h4 id="数据更改" tabindex="-1"><a class="header-anchor" href="#数据更改" aria-hidden="true">#</a> 数据更改</h4><p>这部分其实可以在大方向上分为两种情况</p><h3 id="useeffect-基本原理" tabindex="-1"><a class="header-anchor" href="#useeffect-基本原理" aria-hidden="true">#</a> <code>useEffect</code> 基本原理</h3><p>类似 <code>useState</code> 也会在初始执行时将回调函数和第二个依赖项加入 <code>hook.memoizedState</code> 存储，然后在适当时机（在 commit 阶段加入微任务队列）执行。</p><p>执行会根据依赖项的不同执行回调函数。</p><p>如果没有依赖项则每次重新渲染都会执行回调函数（这里包括 setup 与 destroy 函数，update 时先执行 destroy，再执行 setup。mount 时只执行setup）。</p><p>如果依赖项为空数组的话只有mount时会执行 setup，在卸载时执行 destroy。</p><p>如果依赖项存在，则会判断状态是否更改，如果更改的话就同没有依赖项一样执行。</p>`,33);function m(v,f){const a=i("ExternalLinkIcon");return s(),t("div",null,[r,l,u,e("p",null,[e("a",k,[o("规则列表"),c(a)]),o("：")]),h])}const H=n(p,[["render",m],["__file","react-hook.html.vue"]]);export{H as default};
