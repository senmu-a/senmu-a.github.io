import{_ as l,p as i,q as e,Y as c}from"./framework-aa5c4115.js";const o={},d=c('<h3 id="js-的数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#js-的数据类型有哪些" aria-hidden="true">#</a> js 的数据类型有哪些？</h3><ul><li>基础数据类型 <ul><li><code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>undefined</code>、<code>null</code>、<code>Symbol</code>、<code>BigInt</code></li></ul></li><li>复杂数据类型 <ul><li><code>Object</code></li></ul></li></ul><p>它们分别存储在栈内存（Stack）和堆内存（Heap）中。</p><ul><li>栈内存 — 内存中的连续空间、访问速度快；只能存储少量数据</li><li>堆内存 — 非连续空间、访问速度慢；一般用来存储大量数据</li></ul><h3 id="js-中数组有哪些方法" tabindex="-1"><a class="header-anchor" href="#js-中数组有哪些方法" aria-hidden="true">#</a> js 中数组有哪些方法？</h3><p>从数组的操作（增、删、改、查）、排序、转换、迭代的角度来看，另外注意操作/方法是否会更改原数组，以及方法的返回值：</p><ul><li>增 <ul><li>push() 往数组尾部增加内容，返回新数组的长度，会改变原数组</li><li>unshift() 往数组头部增加内容，返回新数组的长度，会改变原数组</li><li>splice() 指定数组位置开始增加，返回空数组（因为返回值是删除的元素数组集合），会改变原数组</li><li>concat() 创建当前数组的副本，往副本中添加内容，返回组合成的新数组，不会改变原数组</li></ul></li><li>删 <ul><li>pop() 删除数组尾部内容，返回被删除的元素，会改变原数组</li><li>shift() 删除数组头部内容，返回被删除的元素，会改变原数组</li><li>splice() 指定数组位置开始删除，返回被删除元素的数组集合，会改变原数组</li><li>slice() 创建一个指定位置集合的数组，不会改变原数组</li></ul></li><li>改 <ul><li>splice()</li></ul></li><li>查 <ul><li>indexOf()</li><li>includes()</li><li>find()</li></ul></li><li>排序 <ul><li>reverse() 将数组反向排序（翻转数组），返回排序后的数组，会改变原数组</li><li>sort() 将数组按照传入的回调函数的返回值 -1、0、1 来排序，返回排序后的数组，会改变原数组</li></ul></li><li>转换 <ul><li>join() 将数组按照传入的参数来转换，返回转换后的字符串，不会改变原数组</li></ul></li><li>迭代 <ul><li>forEach()</li><li>filter()</li><li>map()</li><li>reduce()</li><li>some()</li><li>every()</li></ul></li></ul>',7),u=[d];function a(s,t){return i(),e("div",null,u)}const n=l(o,[["render",a],["__file","javascript.html.vue"]]);export{n as default};
