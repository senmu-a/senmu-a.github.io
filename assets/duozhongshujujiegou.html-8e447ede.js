import{_ as a,p as n,q as s,Y as t}from"./framework-aa5c4115.js";const e={},o=t(`<h2 id="一、普通数组与-set-对比" tabindex="-1"><a class="header-anchor" href="#一、普通数组与-set-对比" aria-hidden="true">#</a> 一、普通数组与 <code>Set</code> 对比</h2><h3 id="_1-1-普通数组的底层数据结构" tabindex="-1"><a class="header-anchor" href="#_1-1-普通数组的底层数据结构" aria-hidden="true">#</a> 1.1 普通数组的底层数据结构</h3><p>普通数组是 JavaScript 中的基本数据结构，它底层的数据结构是动态调整的。</p><ol><li>密集数组：<code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>，使用连续的内存块来存储数据。</li><li>稀疏数组：<code>[1, , , , , , , , , 10]</code>，使用哈希表来存储数据。</li><li>动态数组：<code>const arr = []; arr.push(1); arr.pop();</code> 等类似操作，会对数组进行扩容。</li></ol><h3 id="_1-2-set-底层数据结构" tabindex="-1"><a class="header-anchor" href="#_1-2-set-底层数据结构" aria-hidden="true">#</a> 1.2 <code>Set</code> 底层数据结构</h3><p>Set 底层数据结构是一个哈希表，它使用哈希表来存储数据。</p><h3 id="_1-3-关于普通数组与-set-的疑问" tabindex="-1"><a class="header-anchor" href="#_1-3-关于普通数组与-set-的疑问" aria-hidden="true">#</a> 1.3 关于普通数组与 <code>Set</code> 的疑问？</h3><ul><li>稀疏数组是通过哈希表来存储数据，那么使用 <code>includes</code> 方法时时间复杂度是多少？ 答：<code>O(n)</code></li><li><code>Set</code> 中的 <code>has</code> 与 <code>includes</code> 类似，那么他的时间复杂度又是多少？ 答：<code>O(1)</code></li><li>他们的原理是什么？为什么会有差异？</li><li><ul><li>他们的处理原理不同，<code>includes</code> 方法是通过遍历数组来查找元素（即使是稀疏数组），而 <code>has</code> 方法是通过哈希表来查找元素。</li></ul></li></ul><h3 id="_1-4-关于-set-中-has-方法的原理扩展" tabindex="-1"><a class="header-anchor" href="#_1-4-关于-set-中-has-方法的原理扩展" aria-hidden="true">#</a> 1.4 关于 <code>Set</code> 中 has 方法的原理扩展</h3><ol><li>计算哈希值。使用哈希函数计算目标值的哈希值。</li><li>查找哈希桶。根据哈希值找到对应的哈希桶。</li><li>检查哈希冲突。如果哈希桶中有多个值（由于冲突），则遍历链表或使用其他方法查找目标值。</li><li>返回结果</li></ol><h3 id="_1-5-总结" tabindex="-1"><a class="header-anchor" href="#_1-5-总结" aria-hidden="true">#</a> 1.5 总结</h3><p>针对以上分析，那普通数组和 <code>Set</code> 的使用场景到底有什么区别？</p><table><thead><tr><th>特性</th><th>普通数组（Array）</th><th>Set</th></tr></thead><tbody><tr><td><strong>有序性</strong></td><td>有序</td><td>无序</td></tr><tr><td><strong>重复值</strong></td><td>允许重复值</td><td>不允许重复值</td></tr><tr><td><strong>索引访问</strong></td><td>支持（<code>arr[0]</code>）</td><td>不支持</td></tr><tr><td><strong>查找操作</strong></td><td><code>includes</code>，时间复杂度 <code>O(n)</code></td><td><code>has</code>，平均时间复杂度 <code>O(1)</code></td></tr><tr><td><strong>动态长度</strong></td><td>支持</td><td>支持</td></tr><tr><td><strong>底层实现</strong></td><td>密集数组或稀疏数组</td><td>哈希表</td></tr><tr><td><strong>适用场景</strong></td><td>有序数据、重复值、索引访问</td><td>唯一值、快速查找、集合运算（并集、交集等）</td></tr></tbody></table><hr><h2 id="二、普通对象与-map-对比" tabindex="-1"><a class="header-anchor" href="#二、普通对象与-map-对比" aria-hidden="true">#</a> 二、普通对象与 <code>Map</code> 对比</h2><h3 id="_2-1-普通对象的底层数据结构" tabindex="-1"><a class="header-anchor" href="#_2-1-普通对象的底层数据结构" aria-hidden="true">#</a> 2.1 普通对象的底层数据结构</h3><p>一般来说，普通对象采用哈希表来存储，并通过隐藏类和内联缓存来优化访问性能。但是遇到频繁变化属性时会调整为字典结构。</p><p><code>Map</code> 采用强哈希表来存储，插入顺序可以保证。</p><p>默认普通对象和 <code>Map</code> 的键值都是强引用，<code>WeakMap</code> 是弱引用，允许被垃圾回收。</p><h4 id="什么是隐藏类" tabindex="-1"><a class="header-anchor" href="#什么是隐藏类" aria-hidden="true">#</a> 什么是隐藏类？</h4><p>隐藏类就是将具有相同结构的对象共享同一个类定义，减少内存占用。</p><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 隐藏类 C1</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 共享隐藏类 C1（与 obj1 共享）</span>

<span class="token comment">// ⚠️但是！！！以下例子无法共享隐藏类</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 隐藏类 C1</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 隐藏类 C2</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="什么是内联缓存" tabindex="-1"><a class="header-anchor" href="#什么是内联缓存" aria-hidden="true">#</a> 什么是内联缓存？</h4><p>优化同一个对象的同一个属性的多次访问。通过缓存属性访问的结果，加速后续访问。</p><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 首次访问，记录缓存</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用缓存，加速访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-图表对比" tabindex="-1"><a class="header-anchor" href="#_2-2-图表对比" aria-hidden="true">#</a> 2.2 图表对比</h3><table><thead><tr><th>特性</th><th>普通对象（Object）</th><th>Map</th></tr></thead><tbody><tr><td><strong>键类型</strong></td><td>字符串或符号（Symbol）</td><td>任意值</td></tr><tr><td><strong>键的顺序</strong></td><td>键的插入顺序</td><td>键的插入顺序</td></tr><tr><td><strong>键的遍历</strong></td><td>需要手动遍历（<code>Object.keys()</code>）</td><td>自动遍历</td></tr></tbody></table><h3 id="_2-3-总结" tabindex="-1"><a class="header-anchor" href="#_2-3-总结" aria-hidden="true">#</a> 2.3 总结</h3><p>如果需要简单的存储并且读取的话使用普通对象即可，如果是需要频繁</p>`,31),p=[o];function c(r,d){return n(),s("div",null,p)}const i=a(e,[["render",c],["__file","duozhongshujujiegou.html.vue"]]);export{i as default};
